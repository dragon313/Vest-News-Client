Здравствуйте. Меня зовут Вдовенков Александр. Я Java программист, моя специализация - разработка бизнес приложений под мобильную платформу Android.
Я родился в Калуге, калыбели космонавтики. Здесь я и проживаю на данный момент.
Увлекаться программированием в частность и компьютерными технологиями вообще начал ещё в детстве. Свою первую программу написал в школе, на языке Pascal, по книге, которую мне дал старший товарищь. Но, закончив школу я не отправился в технический ВУЗ, а наоборот решил помогать людям - пошёл в медицинский. Учась в Смоленской мед академии не забрасывал занятия IT, читал профильные форумы, интересовался мобильной разработкой. На пятом курсе параллельно поступил на заочное на факультет разработки ПО.
В 2013 окончательно разочаровался в современной системе здравоохранения и ушёл работать в IT, начинал как системный администратор, времени свободного было много, впитывать большие объяемы знаний я умел отлично, да и изучаемые предметы мне нравились.
По ходу обучения пришлось познакомиться с такими языками как ProLog, C, C++ и C#, немного касались веб-разработки, но всё это также на уровне касаний, в основном давались фундаментальные знания, в частности приходилось искать и изучать самому. Уже в тот период я понял, что мне больше всего нравятся именно ООП. 2 года назад оценив ситуацию на рынке IT, да и в Мире, я решил отказаться от идеи развиваться в C# разработчика и стал изучать Java.
Я выбрал язык Java по нескольким причинам:
-Для меня было важно, что Java это однозначно ООЯП.
-Java обладает C-подобным синтаксисом и, как следствие легко учится после любого C-образного языка.
-У Java огромная история и комьюнити, а значит большинство моих вопросов уже имеют ответ  и Google поможет мне его найти.
-Java является основным языком для написания приложений под платформу Android, а я ставил себе именно эту цель.
Также в плюсы Java стоит отнести отличную документацию, большой набор бесплатных библиотек с открытыми исходниками и хорошую IDE, от jetBrains.
Единственный минус, который я могу выделить это избыточность языка, его многословность. Может быть, когда-нибудь, мы все перейдём на более лаконичный Kotlin, но пока что этого не произошло и я пишу свои приложения на Java.

Для примера давайте разберём написание циклических конструкций в Java. Но прежде чем писать код, нам следует разобраться какие конструкции в Java называются циклическими:
В Java циклы бывают трёх видов:
1. цикл с предусловием. (while) Когда код в теле цикла выполняется до тех пор, пока верно условие.
2. цикл с постусловием. (do…while) В данном случае код в теле цикла выполнится как минимум один раз, прежде чем будет проверен ословие.
3. цикл со счетчиком. (for) Данная конструкция призвана упростить написание циклов в которых точно известно количество повторений.

Теперь перейдём к написанию кода, для этого запустим нашу среду разработки. Лично я пользуюсь IntelliJ IDEA от JetBrains. Создадим в ней простой Java проект, состоящий из одного класса Exercise
 и в нем опишем точку входа в наше приложение - метод main()
Для примера мы возьмем цикл со счетчиком. Предположим такую ситуацию, что нам необходимо посчитать общее количество подтягиваний которое сделает спортсмен, если он "играет в лесенку" до 15 подтягиваний.
В классе зададим константу, в которой опишем, сколько всего подтягиваний должен сделать спортсмен.
Для того, чтобы посчитать общее количество подтягиваний создадим метод getPullUpsTotal, который будет возвращать целочисленное значение.

Внутри метода объявим локальную целочисленную переменную, которая будет отражать общее количество подтягиваний сделанных спортсменом.

Далее начнём писать наш цикл.
for - ключевое слово, после которого компилятор будет ждать условие цикла.
(int i = 0; - задаем переменную, которая будет нашим счётчиком. Чаще всего используется тип int, но могут использоваться и другие.
 i<=15; - это условие, при котором цикл будет выполняться. Данная запись говорит компилятору, что блок кода в фигурных скобках необходимо повторять до тех пор пока переменная меньше или равна количеству подтягиваний. Стоит отметить, что если данное условие будет всегда возвращать истину, то такой цикл будет бесконечным, а это чаще всего не есть хорошо.
 i++) - в третьем блоке условий пишется выражение, которое должно изменять счётчик. Чаще всего это простой инкремент или декремент, но никто не мешает писать туда и более сложные вещи.
 {
	Код в фигурных скобках.
 }

Итак смысл игры в лесенку заключается в том, что каждый раз делается на одно подтягивание больше, чем до этого, и так пока не будет достигнут конечный результат. В нашем случае это 15 подтягиваний.

А это значит, чо каждый проход цикла мы будем прибавлять к общему числу подтягиваний количество подтягиваний в данном подходе.

public int getPullUpsTotal() {
        int pullUpsTotal = 0;
        for (int i = 0; i <= PULL_UPS_COUNT; i++) {
            pullUpsTotal += i;
        }
        return pullUpsTotal;
    }




